Family_Incidents <- read_excel("Assignment/Assignment 2/Family_Incidents.xlsx")
Family_Incidents <- read_excel("Home/UNI-recent/RMIT2021/Applied Analytics-MATH1324/assignment2/Family_Incidences.xlsx")
Family_Incidents <- read_excel("Home/UNI-recent/RMIT2021/Applied Analytics-MATH1324/assignment2/Family_Incidences.xlsx")
library(readxl)
library(tidyr)
library(dplyr)
library(forcats)
library(car)
library(magrittr)
library(granova)
library(readxl)
incident <- Family_Incidents %>% filter(Year == "2019" | Year == "2020")
incident <- Family_Incidents %>% filter(.,Year == "2019" | Year == "2020")
library(tidyr)
library(dplyr)
library(forcats)
library(tidyr)
library(dplyr)
library(forcats)
library(car)
library(magrittr)
library(granova)
library(readxl)
Family_Incidents <- read_excel("~/UNI-recent/RMIT2021/Applied Analytics-MATH1324/assignment2")
Family_Incidents <- read_excel("~/UNI-recent/RMIT2021/Applied Analytics-MATH1324/assignment2")
Family_Incidents <- read_excel("~/UNI-recent/RMIT2021/Applied Analytics-MATH1324/assignment2/Family_Incidents")
Family_Incidents <- read_excel("~/UNI-recent/RMIT2021/Applied Analytics-MATH1324/assignment2/Family_Incidents.xlsx")
Family_Incidents <- read_excel("~/UNI-recent/RMIT2021/Applied Analytics-MATH1324/assignment2/Family_Incidents.xlsx")
Family_Incidents %>%  filter(Year == "2019" | Year == "2020") %>%
group_by(Year) %>% summarise(Min = min(`Rate_per_100,000_population`, na.rm = TRUE),
Q1 = quantile(`Rate_per_100,000_population`,probs = .25,na.rm = TRUE),
Median = median(`Rate_per_100,000_population`, na.rm = TRUE),
Q3 = quantile(`Rate_per_100,000_population`,probs = .75,na.rm = TRUE),
Max = max(`Rate_per_100,000_population`,na.rm = TRUE),
Mean = mean(`Rate_per_100,000_population`, na.rm = TRUE),
SD = sd(`Rate_per_100,000_population`, na.rm = TRUE),
n = n(),
Missing = sum(is.na(`Rate_per_100,000_population`)))
Family_Incidents %>% filter(Year == "2019" | Year == "2020") %>%
boxplot(`Rate_per_100,000_population` ~ Year, data = ., main ="Family Incidents by 100,000 population by Year", ylab="Incidents", col="red")
incident <- Family_Incidents %>% filter(Year == "2019" | Year == "2020")
incident
incident_clean <- subset(incident, `Local_Government_Area` != "Total")
incident_clean <- incident_clean[c(1,6)]
incident_clean <- incident_clean %>% group_by(Year) %>% mutate(id = row_number())
incident_clean <- incident_clean %>% spread(Year, `Rate_per_100,000_population`) %>% select(-id)
incident_df <- incident_clean %>% mutate(d = `2020` - `2019`)
incident_df
incident_df %>%
summarise(Min = min(d, na.rm =TRUE),
Q1 = quantile(d,probs = .25,na.rm = TRUE),
Median = median(d, na.rm = TRUE),
Q3 = quantile(d,probs = .75, na.rm = TRUE),
IQR = IQR(d, na.rm = TRUE),
Max = max(d,na.rm = TRUE),
Mean = mean(d, na.rm = TRUE),
SD =sd(d, na.rm = TRUE),
N = n(),
Missing = sum(is.na(d)))
hist(incident_df$d)
qqPlot(incident_df$d, dist ="norm")
boxplot(
incident_df$d,
ylab = "Incidents per 100,000 population",
xlab = 'Variance between 2019 and 2020', col = "red",
main = " Difference in Incidents per 100,000 population"
)
axis(1, at = 1:1, labels = c("Variance"))
matplot(t(data.frame(incident_df$`2020`, incident_df$`2019`)),
type = "b",
pch = 16,
col = 1,
lty = 1,
xlab = "Year",
ylab = "Incidents",
xaxt = "n",
main = " Incidents per 100,000 pop"
)
axis(1, at = 1:2, labels = c("2020-During COVID", "2019-Before COVID 19"))
t.test(incident_df$`2020`, incident_df$`2019`,
paired = TRUE,
alternative = "two.sided", conf.level = .95)
wilcox.test(incident_df$`2020`, incident_df$`2019`, conf.int = TRUE)
## the critical value of t-test, 2 tailed at a = .05
##-1.990
### still working on this#
qt(p = 0.025, df = 78)
#two tailed p-value p <1.999
2*pt(q = 3.84, df = 78)
Family_Incidents <- read_excel("~/UNI-recent/RMIT2021/Applied Analytics-MATH1324/assignment2/Family_Incidents.xlsx")
Family_Incidents <- read_excel("~/UNI-recent/RMIT2021/Applied Analytics-MATH1324/assignment2/Family_Incidents.xlsx")
Family_Incidents %>%  filter(Year == "2019" | Year == "2020") %>%
group_by(Year) %>% summarise(Min = min(`Rate_per_100,000_population`, na.rm = TRUE),
Q1 = quantile(`Rate_per_100,000_population`,probs = .25,na.rm = TRUE),
Median = median(`Rate_per_100,000_population`, na.rm = TRUE),
Q3 = quantile(`Rate_per_100,000_population`,probs = .75,na.rm = TRUE),
Max = max(`Rate_per_100,000_population`,na.rm = TRUE),
Mean = mean(`Rate_per_100,000_population`, na.rm = TRUE),
SD = sd(`Rate_per_100,000_population`, na.rm = TRUE),
n = n(),
Missing = sum(is.na(`Rate_per_100,000_population`)))
Family_Incidents %>% filter(Year == "2019" | Year == "2020") %>%
boxplot(`Rate_per_100,000_population` ~ Year, data = ., main ="Family Incidents by 100,000 population by Year", ylab="Incidents", col="red")
incident <- Family_Incidents %>% filter(Year == "2019" | Year == "2020")
incident
incident_clean <- subset(incident, `Local_Government_Area` != "Total")
incident_clean <- incident_clean[c(1,6)]
incident_clean <- incident_clean %>% group_by(Year) %>% mutate(id = row_number())
incident_clean <- incident_clean %>% spread(Year, `Rate_per_100,000_population`) %>% select(-id)
incident_df <- incident_clean %>% mutate(d = `2020` - `2019`)
incident_df
incident_df %>%
summarise(Min = min(d, na.rm =TRUE),
Q1 = quantile(d,probs = .25,na.rm = TRUE),
Median = median(d, na.rm = TRUE),
Q3 = quantile(d,probs = .75, na.rm = TRUE),
IQR = IQR(d, na.rm = TRUE),
Max = max(d,na.rm = TRUE),
Mean = mean(d, na.rm = TRUE),
SD =sd(d, na.rm = TRUE),
N = n(),
Missing = sum(is.na(d)))
hist(incident_df$d)
qqPlot(incident_df$d, dist ="norm")
boxplot(
incident_df$d,
ylab = "Incidents per 100,000 population",
xlab = 'Variance between 2019 and 2020', col = "red",
main = " Difference in Incidents per 100,000 population"
)
axis(1, at = 1:1, labels = c("Variance"))
matplot(t(data.frame(incident_df$`2020`, incident_df$`2019`)),
type = "b",
pch = 16,
col = 1,
lty = 1,
xlab = "Year",
ylab = "Incidents",
xaxt = "n",
main = " Incidents per 100,000 pop"
)
axis(1, at = 1:2, labels = c("2020-During COVID", "2019-Before COVID 19"))
t.test(incident_df$`2020`, incident_df$`2019`,
paired = TRUE,
alternative = "two.sided", conf.level = .95)
wilcox.test(incident_df$`2020`, incident_df$`2019`, conf.int = TRUE)
## the critical value of t-test, 2 tailed at a = .05
##-1.990
### still working on this#
qt(p = 0.025, df = 78)
#two tailed p-value p <1.999
2*pt(q = 3.84, df = 78)
## THESE TWO SHOULD BE COMPAREDn in our findings ###
+
#two tailed p-value p <1.999
2*pt(q = 3.84, df = 78)
## THESE TWO SHOULD BE COMPAREDn in our findings ###
+
#two tailed p-value p <1.999
2*pt(q = 3.84, df = 78)
## THESE TWO SHOULD BE COMPAREDn in our findings ###
+
#two tailed p-value p <1.999
2*pt(q = 3.84, df = 78)
## THESE TWO SHOULD BE COMPAREDn in our findings ###
+
#two tailed p-value p <1.999
2*pt(q = 3.84, df = 78)
## THESE TWO SHOULD BE COMPAREDn in our findings ###
+
#two tailed p-value p <1.999
2*pt(q = 3.84, df = 78)
## THESE TWO SHOULD BE COMPAREDn in our findings ###
+
#two tailed p-value p <1.999
2*pt(q = 3.84, df = 78)
## THESE TWO SHOULD BE COMPAREDn in our findings ###
+
#two tailed p-value p <1.999
2*pt(q = 3.84, df = 78)
Family_Incidents <- read_excel("~/UNI-recent/RMIT2021/Applied Analytics-MATH1324/assignment2/Family_Incidents.xlsx")
Family_Incidents %>%  filter(Year == "2019" | Year == "2020") %>%
group_by(Year) %>% summarise(Min = min(`Rate_per_100,000_population`, na.rm = TRUE),
Q1 = quantile(`Rate_per_100,000_population`,probs = .25,na.rm = TRUE),
Median = median(`Rate_per_100,000_population`, na.rm = TRUE),
Q3 = quantile(`Rate_per_100,000_population`,probs = .75,na.rm = TRUE),
Max = max(`Rate_per_100,000_population`,na.rm = TRUE),
Mean = mean(`Rate_per_100,000_population`, na.rm = TRUE),
SD = sd(`Rate_per_100,000_population`, na.rm = TRUE),
n = n(),
Missing = sum(is.na(`Rate_per_100,000_population`)))
Family_Incidents %>% filter(Year == "2019" | Year == "2020") %>%
boxplot(`Rate_per_100,000_population` ~ Year, data = ., main ="Family Incidents by 100,000 population by Year", ylab="Incidents", col="red")
incident <- Family_Incidents %>% filter(Year == "2019" | Year == "2020")
incident
incident_clean <- subset(incident, `Local_Government_Area` != "Total")
incident_clean <- incident_clean[c(1,6)]
incident_clean <- incident_clean %>% group_by(Year) %>% mutate(id = row_number())
incident_clean <- incident_clean %>% spread(Year, `Rate_per_100,000_population`) %>% select(-id)
incident_df <- incident_clean %>% mutate(d = `2020` - `2019`)
incident_df
incident_df %>%
summarise(Min = min(d, na.rm =TRUE),
Q1 = quantile(d,probs = .25,na.rm = TRUE),
Median = median(d, na.rm = TRUE),
Q3 = quantile(d,probs = .75, na.rm = TRUE),
IQR = IQR(d, na.rm = TRUE),
Max = max(d,na.rm = TRUE),
Mean = mean(d, na.rm = TRUE),
SD =sd(d, na.rm = TRUE),
N = n(),
Missing = sum(is.na(d)))
hist(incident_df$d)
qqPlot(incident_df$d, dist ="norm")
boxplot(
incident_df$d,
ylab = "Incidents per 100,000 population",
xlab = 'Variance between 2019 and 2020', col = "red",
main = " Difference in Incidents per 100,000 population"
)
axis(1, at = 1:1, labels = c("Variance"))
matplot(t(data.frame(incident_df$`2020`, incident_df$`2019`)),
type = "b",
pch = 16,
col = 1,
lty = 1,
xlab = "Year",
ylab = "Incidents",
xaxt = "n",
main = " Incidents per 100,000 pop"
)
axis(1, at = 1:2, labels = c("2020-During COVID", "2019-Before COVID 19"))
t.test(incident_df$`2020`, incident_df$`2019`,
paired = TRUE,
alternative = "two.sided", conf.level = .95)
wilcox.test(incident_df$`2020`, incident_df$`2019`, conf.int = TRUE)
## the critical value of t-test, 2 tailed at a = .05
##-1.990
### still working on this#
qt(p = 0.025, df = 78)
# Use this chunk to quietly load your pacakges
knitr::opts_chunk$set(
fig.align = "center",
message = FALSE,
warning = FALSE
)
# Packages loaded in this chunk will not appear in the presentation.
library(readxl)
library(tidyr)
library(dplyr)
library(forecast)
library(car)
library(magrittr)
library(granova)
library(MVN)
library(ggplot2) # Useful for creating plots
library(dplyr)  # Useful for data maipulation
library(knitr) # Useful for creating nice tables
Family_Incidents <- read_excel("~/UNI-recent/RMIT2021/Applied Analytics-MATH1324/assignment2/Family_Incidents.xlsx")
- Limitations:
(1) Family incidents data were compiled based on the date that the incident was created on the LEAP database, rather than the date the incident was detected by, or reported to police.
(2)For simplicity, family incidents were used in favour of the variable 'Rate_per_100,000_population'. The assumption was made that the change in the population between local government areas was not substantial between the 2-year period and therefore would not impact the results.
# Use this chunk to quietly load your pacakges
knitr::opts_chunk$set(
fig.align = "center",
message = FALSE,
warning = FALSE
)
# Packages loaded in this chunk will not appear in the presentation.
library(readxl)
library(tidyr)
library(dplyr)
library(forecast)
library(car)
library(magrittr)
library(granova)
library(MVN)
library(ggplot2) # Useful for creating plots
library(dplyr)  # Useful for data maipulation
library(knitr) # Useful for creating nice tables
Family_Incidents <- read_excel("~/UNI-recent/RMIT2021/Applied Analytics-MATH1324/assignment2/Family_Incidents.xlsx")
cleaned_data <- select(Family_Incidents, c('Year','Police_Region','Local_Government_Area','Family_Incidents')) %>%
filter(Year == "2019" | Year == "2020")
cleaned_data <- cleaned_data[
!(cleaned_data$Police_Region=="Justice Institutions and Immigration Facilities"
| cleaned_data$Police_Region=="Unincorporated Vic" | cleaned_data$Local_Government_Area=="Total"),]
head(cleaned_data)
str(cleaned_data)
cleaned_data$Police_Region <- factor(cleaned_data$Police_Region,
levels = c("1 North West Metro","2 Eastern","3 Southern Metro","4 Western"),
ordered = TRUE)
levels(cleaned_data$Police_Region)
str(cleaned_data)
cleaned_data %>% group_by(Year) %>% summarise(Min = min(Family_Incidents, na.rm = TRUE),
Q1 = quantile(Family_Incidents,probs = .25,na.rm = TRUE),
Median = median(Family_Incidents, na.rm = TRUE),
Q3 = quantile(Family_Incidents,probs = .75,na.rm = TRUE),
Max = max(Family_Incidents,na.rm = TRUE),
Mean = mean(Family_Incidents, na.rm = TRUE),
SD = sd(Family_Incidents, na.rm = TRUE),
n = n(),
Missing = sum(is.na(Family_Incidents)))
cleaned_data %>% boxplot(Family_Incidents ~ Year, data = .,
main ="Family Incidents by Year",
ylab="Incidents", col="red")
# To check the special values in the dataset
is.special <- function(x){ if(is.numeric(x))
(is.infinite(x)|is.nan(x)|is.na(x))}
cleaned_data %>% sapply(function(x) sum(is.special(x)))
cleaned_family_incidents <- cleaned_data %>% spread(Year, Family_Incidents)
cleaned_family_incidents <- cleaned_family_incidents %>% mutate(Difference = `2020` - `2019`)
head(cleaned_family_incidents)
par(mfrow = c(1,2))
hist(cleaned_family_incidents$Difference,main = "Difference before Trans.",
xlab = "Values of Difference",col = "green")
Normal_Diff_values <- BoxCox(cleaned_family_incidents$Difference, lambda = "auto")
hist(Normal_Diff_values,main = "Difference before Trans.",
xlab = "Values of Normal Difference",
col = "blue")
cleaned_family_incidents <- mutate(cleaned_family_incidents, Normal_Diff_values)
par(mfrow = c(1,2))
boxplot(cleaned_family_incidents$Normal_Diff_values,
main = "Before Capping",
ylab = "Frequency",
xlab = "Difference of Family Incidents",
col = "brown")
cap <- function(x){
quantiles <- quantile( x, c(0.05, 0.25, 0.75, 0.95 ))
x[ x < quantiles[2] - 1.5*IQR(x, na.rm = T) ] <- quantiles[1]
x[ x > quantiles[3] + 1.5*IQR(x, na.rm = T) ] <- quantiles[4]
x}
cleaned_family_incidents$Normal_Diff_values <- cleaned_family_incidents$Normal_Diff_values %>% cap()
boxplot(cleaned_family_incidents$Normal_Diff_values,
main = "After Capping",
ylab = "Frequency",
xlab = "Difference of Family Incidents",
col = "Maroon")
cleaned_family_incidents %>% summarise(
Min = min(Difference, na.rm = TRUE),
Q1 = quantile(Difference, probs = .25, na.rm = TRUE),
Median = median(Difference, na.rm = TRUE),
Q3 = quantile(Difference, probs = .75, na.rm = TRUE),
Max = max(Difference, na.rm = TRUE),
Mean = mean(Difference, na.rm = TRUE),
SD = sd(Difference, na.rm = TRUE),
n = n(),
Missing = sum(is.na(Difference)))
qqPlot(Normal_Diff_values, dist="norm")
t.test(cleaned_family_incidents$`2020`, cleaned_family_incidents$`2019`,
paired = TRUE,
alternative = "two.sided",
conf.level = .95)
qt(p = 0.025, df = 78)
